@inject IJSRuntime JSRuntime
@inject HttpClient Http

@if (cars == null)
{
    <h3>..Loading Cars</h3>
    <div id="@carouselName" class="carousel slide carousel-shape" data-bs-ride="carousel" data-bs-wrap="true" data-bs-interval="5000" data-bs-pause="false">
        <div class="carousel-inner ">
            <div class="carousel-item active ">
                <img src="/Images/light.jpg" class="d-block " alt="...">
            </div>
        </div>
    </div>
}


@if (cars != null)
{
    <div id="@carouselName" class="carousel slide carousel-shape" data-bs-ride="carousel" data-bs-wrap="true" data-bs-interval="5000" data-bs-pause="false">
        <div class="carousel-inner ">
            <div class="carousel-item active ">
                <img src="/Images//Logo.PNG" class="d-block " alt="...">
            </div>
            @foreach (var car in cars)
            {
                if (!string.IsNullOrEmpty(car.ImageTitle))
                {
                    <div class="carousel-item">
                        <img src="@car.ImageTitle" class="d-block " alt="...">
                        <div class="carousel-caption d-none d-md-block">
                            <h5>@car.Brand , @car.Model</h5>
                            <p>@car.Price Dkk,  @car.Km Km </p>
                        </div>
                    </div>
                }
            }
        </div>
        <button class="carousel-control-prev" type="button" data-bs-target="#myCarousel" data-bs-slide="prev">
            <span class="carousel-control-prev-icon" aria-hidden="true"></span>
            <span class="visually-hidden">Previous</span>
        </button>
        <button class="carousel-control-next" type="button" data-bs-target="#myCarousel" data-bs-slide="next">
            <span class="carousel-control-next-icon" aria-hidden="true"></span>
            <span class="visually-hidden">Next</span>
        </button>
    </div>

}

@code {

    public IEnumerable<Car>? cars { get; set; }
    const string carouselName = "myCarousel"; // NOTE: the ID of the carousel
    string? imageBase64;
    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        object[] args = { carouselName };
        await JSRuntime.InvokeVoidAsync("startCarousel", args); // NOTE: call JavaScript function with the ID of the carousel

    }

    protected override async Task OnInitializedAsync()
    {
        cars = await Http.GetFromJsonAsync<IEnumerable<Car>>("/carservice");
        foreach (var car in cars)
        {
            const string format = "image/png";
            imageBase64 = $"data:{format};base64,{Convert.ToBase64String(car.ImageData)}";
            car.ImageTitle = imageBase64;


        }
    }

}