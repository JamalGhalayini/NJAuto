@using System.Text.Json
@using System.Text
@using System.Net.Mime
@inject IDialogService DialogService
@inject HttpClient HttpClient
@inject NavigationManager Navigator

<MudCard @onclick="@(ToggleDrawer)" Class="car" Style="width: 18rem; height:23rem; background-color:#333333; color:white;">
    <MudCardMedia Image="/Images/plus.png" Height="200"></MudCardMedia>
    <MudCardContent>
        <MudText>Add Car</MudText>
    </MudCardContent>
</MudCard>


<MudDrawer @bind-Open="@_open" Width="600px" Height="100%" Anchor="_anchor" Elevation="1" Variant="@DrawerVariant.Temporary" Style="background-color:#484848; color:white;">
    <div class=" container-fluid">
        <div>
            <EditForm Model="@_car" OnValidSubmit="@CreateCar">
                 <DataAnnotationsValidator/>
                <ValidationSummary/>

                <div class="row p-4">

                    <InputFile OnChange="OnFileChange" accept=".jpg, .jpeg, .png" title="Upload image"></InputFile>

                    <img class="offset-3 col-5 align-items-center" src="@imageBase64" width="200" height="200" />
                </div>
                <div class="align-items-center">

                    <div class="row p-2">
                        <label class=" offset-1 col-1"> Brand</label>
                        <label class="col-1 offset-6">Model</label>
                    </div>
                    <div class="row ">

                        <InputText @bind-Value=@_car.Brand class=" offset-1 col-3"></InputText>
                        <InputText @bind-Value=@_car.Model class="col-3 offset-4" title="Car Model"></InputText>
                    </div>
                    <div class="row p-2 pt-3">
                        <label class=" offset-1 col-1"> YearModel</label>
                        <label class="col-1 offset-3 "> Kilometers</label>
                        <label class="offset-3 col-1"> Price </label>
                    </div>
                    <div class="row ">

                        <InputNumber @bind-Value=@_car.YearModel class=" offset-1 col-3"></InputNumber>
                        <InputNumber @bind-Value=@_car.Km class="col-3 offset-1"></InputNumber>
                        <InputNumber @bind-Value=@_car.Price class="col-3 offset-1"></InputNumber>
                    </div>
                    <div class="row p-2 pt-3">
                        <label class=" offset-1 col-1"> Details</label>
                    </div>
                    <div class="row ">
                        <InputTextArea @bind-Value=@_car.Detail class="offset-1 col-9" style="height:200px;resize:none;"></InputTextArea>
                    </div>
                </div>
                <div class="row pt-4">
                    <button type="submit" class="btn btn-success offset-8 col-2"> Add car</button>
                </div>
            </EditForm>


        </div>
    </div>
</MudDrawer>

@code {
    private CarCreateModel _car { get; set; } = new();
    bool _open = false;
    Anchor _anchor;
    private string? imageBase64;

    void ToggleDrawer()
    {
        _open = !_open;
        _anchor = Anchor.End;
    }


    async Task CreateCar()
    {
        var options = new DialogOptions { CloseOnEscapeKey = true };
        if (_car != null)
        {
            var result = await HttpClient.PostAsJsonAsync<CarCreateModel>("/carservice", _car);

            if (result.IsSuccessStatusCode)
            {
                DialogService.Show<DialogSucces>("Car Added", options);
                await Task.Delay(1000);
                Navigator.NavigateTo("/showcars",true);
               
            }
            if (!result.IsSuccessStatusCode)
            {
                DialogService.Show<DialogError>("Failed to add car ", options);

            }
        }
      

    }

    async Task OnFileChange(InputFileChangeEventArgs e)
    {
      
        _car.ImageTitle = e.File.Name;
        const string format = "image/png";
        var resizedImage = await e.File.RequestImageFileAsync(format, 600, 600);
        var buffer = new byte[resizedImage.Size];
        await resizedImage.OpenReadStream().ReadAsync(buffer);
        imageBase64 = $"data:{format};base64,{Convert.ToBase64String(buffer)}";
        _car.ImageData = buffer;
    }

}
